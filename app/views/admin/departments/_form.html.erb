<%#
# Form Partial

This partial is rendered on a resource's `new` and `edit` pages,
and renders all form fields for a resource's editable attributes.

## Local variables:

- `page`:
  An instance of [Administrate::Page::Form][1].
  Contains helper methods to display a form,
  and knows which attributes should be displayed in the resource's form.

[1]: http://www.rubydoc.info/gems/administrate/Administrate/Page/Form
%>

<%= form_for([namespace, page.resource], html: { :onsubmit => 'dos();',class: "form"}) do |f| %>
    <!--Helper which prints error message of current object if there is any on to screen(does nothing, if none)-->
    <%= error_messages_for(page.resource) %>

    <% page.attributes.each do |attribute| -%>
        <!--checks if render request came from faculty form-->
        <% current_field_name = attribute.attribute.to_s %>

        <!--skip rendering the courses field if request came from faculty form-->
                <%to_hide_or_not =
                      (current_field_name == "faculty" && session[:data_save].present? && session[:data_save]["isEdit"])?
                          "hide-content":"select-field"%>
        <%set_drop_down_theme = current_field_name == "faculty"?"select-field-margin":""%>

        <div class="field-unit field-unit--<%= attribute.html_class %> <%=to_hide_or_not%> <%= set_drop_down_theme %> ">
              <%= render_field attribute, f: f %>
        </div>

    <% end %>

    <div class="form-actions">
  <%= f.submit %>
</div>
<% end %>


<!--js embedded with ruby-->

<script data-turbolinks="false">
    //sets value of the faculty select to a initial value{only triggered
    //when redirect from faculty form occurs}
    var setValueOfFacultySelect = function () {
        //stores session cache
        <% data_store = session[:data_save]%>
        //sets session cache value for faculty name into faculty field
        for(var i = 0 ; i<$('.hide-content option').length;i++){
            if($(".hide-content option[value='"+i+"']").text() == "<%= data_store.present? ?
             ((data_store["faculty"].present?)? data_store["faculty"]["name"]:"") : "" %>"){
                $(".hide-content select")[0].selectedIndex = i;
                break;
            }
        }
    };

    var dos = function(){
        console.log("Hello");
    };


    //two-way caching between faculty and department
    $( document ).ready(function() {
        //intialize select dropdown
        $('.select-field select').selectize();
        createInstruction("course","*Courses can be linked at a later time if preferred");
        setValueOfFacultySelect();

        //on load of page, check if data store exists in cache
        data_request_store = localStorage['data_store'];
        //cache object which will carry information back to faculty on redirect{used to check authenticity}
        data_to_be_accepted = localStorage['data_store_accept'];
        //checks if there is a data store and if data doesn't already exist on data_store_accept
        // {if it does, this indicates this page was visited twice in a row, breaking the chain}
        if((data_request_store&& JSON.parse(data_request_store))&&(!data_to_be_accepted || !JSON.parse(data_to_be_accepted))) {
            //store in new data cache object
            localStorage['data_store_accept'] = data_request_store;
        }else{
            //if any condition invalidated, do not cache anything.
            localStorage['data_store_accept'] = null;
        }
        //set to null because its no longer in use
        localStorage['data_store'] = null;
    });


</script>