<%#
# Form Partial

This partial is rendered on a resource's `new` and `edit` pages,
and renders all form fields for a resource's editable attributes.

## Local variables:

- `page`:
  An instance of [Administrate::Page::Form][1].
  Contains helper methods to display a form,
  and knows which attributes should be displayed in the resource's form.

[1]: http://www.rubydoc.info/gems/administrate/Administrate/Page/Form
%>


<%= form_for([namespace, page.resource], html: {class: "form"}) do |f| %>


    <!--Helper which prints error message of current object if there is any on to screen(does nothing, if none)-->
    <%= error_messages_for(page.resource) %>


    <% page.attributes.each_with_index do |attribute, index| -%>
        <!--current field name-->
        <% current_field_name = attribute.attribute.to_s %>
        <!--assigns class related to intializing select drop down plugin-->
        <% class_to_add = (current_field_name == "departments")? "select-field":"" %>


            <!--renders a field with a button and instruction label -->
            <div class="row field-unit field-unit--<%= attribute.html_class %> <%= class_to_add%>">
              <div class="col-xs-12">
                <%= render_field attribute, f: f %>
              </div>

              <!--A button only for the departments field which allows for more departments to be added-->
              <% if (current_field_name == "departments")%>
              <div class="col-xs-12">
                  <!--link that redirects to new of department-->
                  <%= link_to(
                        "Create new department",
                        [:new, namespace, "department"],
                        {class: "add-depart", :onclick => "cache()"},
                    ) %>
                </div>
              <%end%>
            </div>

    <%end%>



    <div class="form-actions">
      <%= f.submit %>
    </div>
<% end %>


<script>
    //caches all data of fields and is triggered before redirect button is clicked
    var cache = function () {
        var dataStore = [];
        //iterates through attributes
        <% page.attributes.each_with_index do |attribute,index| -%>
          //store attribute name
          var attribute_name = "<%=attribute.attribute.to_s.singularize %>"
          //get jquery object field related to that attribute
          var valueOfText = $("[name*='" + attribute_name + "']").val()
          dataStore.push(valueOfText);
        <%end%>
        //convert to json and store in cache
        localStorage['data_store'] = JSON.stringify(dataStore)
        console.log(dataStore.toString())
    }

    $(document).ready(function () {
        $('.select-field select').selectize();
        createInstruction("department","*Warning: selecting a department which currently belongs to another facultywill cause for that department to be instead exclusivly linked to this faculty");
        //checks for cached data of form after redirect
        checkForCachedData();

    });

    var checkForCachedData = function(){
        var data_to_be_loaded = localStorage['data_store_accept'];
        data_to_be_loaded = data_to_be_loaded ? JSON.parse(data_to_be_loaded) : null;
        //if data_store exists and it can be parsed(not a empty store)
        if (!localStorage['data_store'] || !JSON.parse(localStorage['data_store']) && data_to_be_loaded) {
            //iterate through attributes and load each piece of data one by one
            <% page.attributes.each_with_index do |attribute,index| -%>
              var attribute_name = "<%=attribute.attribute.to_s.singularize %>"
              var object_load = data_to_be_loaded[<%= index %>] || '';
              $("[name*='" + attribute_name + "']").val(object_load)
            <%end%>
        }
        //set to null to indicate data cache is no longer in use
        localStorage['data_store'] = null;
        localStorage['data_store_accept'] = null;
    }


</script>